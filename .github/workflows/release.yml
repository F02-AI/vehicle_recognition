name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.2.0)'
        required: true
        type: string
      pre_release:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

env:
  GRADLE_OPTS: -Dorg.gradle.jvmargs="-Xmx2048m -XX:MaxMetaspaceSize=512m"

jobs:
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Extract version information
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
          IS_PRERELEASE="${{ github.event.inputs.pre_release }}"
        else
          VERSION=${GITHUB_REF#refs/tags/v}
          # Check if version contains pre-release indicators
          if [[ "$VERSION" =~ (alpha|beta|rc) ]]; then
            IS_PRERELEASE=true
          else
            IS_PRERELEASE=false
          fi
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
        echo "Version: $VERSION, Pre-release: $IS_PRERELEASE"
        
    - name: Validate version format
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        if ! [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
          echo "Invalid version format: $VERSION"
          echo "Expected format: X.Y.Z or X.Y.Z-suffix"
          exit 1
        fi
        
  test:
    name: Full Test Suite
    runs-on: ubuntu-latest
    needs: validate
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'adopt'
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Make gradlew executable
      run: chmod +x ./gradlew
      
    - name: Run all tests
      run: ./gradlew test lintDebug --continue
      
    - name: Generate test coverage report
      run: ./gradlew jacocoTestReport
      
    - name: Verify test coverage threshold
      run: |
        # Add coverage verification if you have minimum thresholds
        ./gradlew jacocoTestCoverageVerification || echo "Coverage verification disabled for now"
        
  build-release:
    name: Build Release APK
    runs-on: ubuntu-latest
    needs: [validate, test]
    timeout-minutes: 25
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'adopt'
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Make gradlew executable
      run: chmod +x ./gradlew
      
    - name: Update version in build.gradle.kts
      run: |
        VERSION="${{ needs.validate.outputs.version }}"
        # Extract version components
        IFS='.' read -r MAJOR MINOR PATCH <<< "${VERSION%%-*}"
        VERSION_CODE=$((MAJOR * 10000 + MINOR * 100 + PATCH))
        
        # Update version in build.gradle.kts
        sed -i "s/versionCode = [0-9]*/versionCode = $VERSION_CODE/" androidApp/build.gradle.kts
        sed -i "s/versionName = \"[^\"]*\"/versionName = \"$VERSION\"/" androidApp/build.gradle.kts
        
        echo "Updated to version $VERSION (code: $VERSION_CODE)"
        
    # Note: For production, you would add signing configuration here
    # - name: Setup keystore
    #   run: |
    #     echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > app-release-key.jks
    #     
    - name: Build release APK (unsigned)
      run: ./gradlew assembleRelease
      # For production: ./gradlew bundleRelease (for AAB) and assembleRelease (for APK)
      
    - name: Verify APK
      run: |
        APK_PATH="androidApp/build/outputs/apk/release/androidApp-release-unsigned.apk"
        if [ -f "$APK_PATH" ]; then
          echo "APK built successfully: $APK_PATH"
          ls -la "$APK_PATH"
          # Add APK analysis tools if needed
        else
          echo "APK not found at expected path"
          find . -name "*.apk" -type f
          exit 1
        fi
        
    - name: Upload release APK
      uses: actions/upload-artifact@v4
      with:
        name: release-apk-${{ needs.validate.outputs.version }}
        path: androidApp/build/outputs/apk/release/androidApp-release-unsigned.apk
        retention-days: 30
        
    # Uncomment for production with proper signing
    # - name: Upload release AAB
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: release-aab-${{ needs.validate.outputs.version }}
    #     path: androidApp/build/outputs/bundle/release/androidApp-release.aab
    #     retention-days: 30
        
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate, test, build-release]
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download release APK
      uses: actions/download-artifact@v4
      with:
        name: release-apk-${{ needs.validate.outputs.version }}
        path: ./artifacts
        
    - name: Generate changelog
      id: changelog
      run: |
        # Generate changelog from git commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        if [ -n "$LAST_TAG" ]; then
          CHANGELOG=$(git log --pretty=format:"- %s" $LAST_TAG..HEAD)
        else
          CHANGELOG=$(git log --pretty=format:"- %s" -10)
        fi
        
        # Save changelog to file for multiline handling
        echo "## Changes in v${{ needs.validate.outputs.version }}" > changelog.md
        echo "" >> changelog.md
        echo "$CHANGELOG" >> changelog.md
        echo "" >> changelog.md
        echo "## License Plate Template Feature" >> changelog.md
        echo "- ✅ New license plate template system with country-specific validation" >> changelog.md
        echo "- ✅ Enhanced UI with template selection in settings" >> changelog.md
        echo "- ✅ Database migration from v3 to v4 with new entities" >> changelog.md
        echo "- ✅ Comprehensive test coverage (300+ tests)" >> changelog.md
        echo "- ✅ Improved OCR accuracy with template-based validation" >> changelog.md
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ needs.validate.outputs.version }}
        name: Release v${{ needs.validate.outputs.version }}
        body_path: changelog.md
        files: |
          ./artifacts/androidApp-release-unsigned.apk
        prerelease: ${{ needs.validate.outputs.is_prerelease == 'true' }}
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
  # Uncomment for Google Play Store deployment
  # deploy-playstore:
  #   name: Deploy to Play Store
  #   runs-on: ubuntu-latest
  #   needs: [validate, test, build-release]
  #   if: needs.validate.outputs.is_prerelease == 'false'
  #   timeout-minutes: 15
  #   
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4
  #     
  #   - name: Download release AAB
  #     uses: actions/download-artifact@v4
  #     with:
  #       name: release-aab-${{ needs.validate.outputs.version }}
  #       path: ./artifacts
  #       
  #   - name: Deploy to Play Store
  #     uses: r0adkll/upload-google-play@v1
  #     with:
  #       serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}
  #       packageName: com.example.vehiclerecognition
  #       releaseFiles: ./artifacts/androidApp-release.aab
  #       track: production
  #       status: completed