package com.example.vehiclerecognition.ui.settings\n\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.foundation.selection.selectable\nimport androidx.compose.material3.*\nimport androidx.compose.runtime.*\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.unit.dp\nimport com.example.vehiclerecognition.model.DetectionMode\n\n// Assuming a ViewModel instance is provided, e.g., via Hilt or a composable factory\n@Composable\nfun SettingsScreen(\n    viewModel: SettingsViewModel // In a real app, this would be injected (e.g. hiltViewModel())\n) {\n    val uiState by viewModel.uiState.collectAsState()\n\n    when (val state = uiState) {\n        is SettingsUiState.Loading -> {\n            Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {\n                CircularProgressIndicator()\n            }\n        }\n        is SettingsUiState.Success -> {\n            SettingsContent(state.selectedMode, state.availableModes) {\n                viewModel.selectDetectionMode(it)\n            }\n        }\n        is SettingsUiState.Error -> {\n            Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {\n                Text(\"Error loading settings: ${'$'}{state.message}\")\n            }\n        }\n    }\n}\n\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun SettingsContent(\n    selectedMode: DetectionMode,\n    availableModes: List<DetectionMode>,\n    onModeSelected: (DetectionMode) -> Unit\n) {\n    Scaffold(\n        topBar = {\n            TopAppBar(title = { Text(\"Settings\") })\n        }\n    ) {\ paddingValues ->\n        Column(\n            modifier = Modifier\n                .padding(paddingValues)\n                .padding(16.dp)\n                .fillMaxWidth(),\n            verticalArrangement = Arrangement.spacedBy(8.dp)\n        ) {\n            Text(\"Select Detection Mode:\", style = MaterialTheme.typography.titleMedium)\n\n            availableModes.forEach { mode ->\n                Row(\n                    Modifier\n                        .fillMaxWidth()\n                        .selectable(\n                            selected = (mode == selectedMode),\n                            onClick = { onModeSelected(mode) }\n                        )\n                        .padding(vertical = 8.dp),\n                    verticalAlignment = Alignment.CenterVertically\n                ) {\n                    RadioButton(\n                        selected = (mode == selectedMode),\n                        onClick = { onModeSelected(mode) }\n                    )\n                    Spacer(Modifier.width(8.dp))\n                    Text(text = mode.name.replace(\"_\", \" \"))\n                }\n            }\n        }\n    }\n}\n\n@Preview(showBackground = true)\n@Composable\nfun SettingsContentPreview() {\n    // Dummy data for preview\n    val modes = DetectionMode.values().toList()\n    val selected = modes.first()\n    MaterialTheme {\n        SettingsContent(selectedMode = selected, availableModes = modes, onModeSelected = {})\n    }\n}\n 